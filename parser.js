class DocParser {
    parseAPIDoc(apiDoc) {
        if (!apiDoc.path || !apiDoc.method) {
            throw new Error('Path and method are required');
        }

        const endpoint = {
            path: apiDoc.path,
            method: apiDoc.method.toUpperCase(),
            description: apiDoc.description || '',
            params: [],
            returns: {
                type: 'object',
                description: 'Response object'
            },
            example: '',
            notes: apiDoc.notes || ''
        };

        if (apiDoc.request) {
            endpoint.params = this.generateParams(apiDoc.request);
            endpoint.requestExample = JSON.stringify(apiDoc.request, null, 2);
        }

        if (apiDoc.response) {
            endpoint.returns = {
                type: this.getType(apiDoc.response),
                description: this.generateResponseDescription(apiDoc.response),
                fields: this.generateParams(apiDoc.response)
            };
            endpoint.responseExample = JSON.stringify(apiDoc.response, null, 2);
        }

        return [endpoint];
    }

    generateParams(data, parentKey = '') {
        const params = [];
        
        for (const [key, value] of Object.entries(data)) {
            const fieldInfo = this.generateFieldDescription(key, value);
            
            const param = {
                name: parentKey ? `${parentKey}.${key}` : key,
                type: this.getType(value),
                description: fieldInfo.description,
                example: fieldInfo.example,
                notes: fieldInfo.notes,
                required: this.isRequired(key, value),
                in: 'body'
            };

            if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
                params.push(param);
                params.push(...this.generateParams(value, key));
            } else {
                params.push(param);
            }
        }

        return params;
    }

    generateFieldDescription(key, value) {
        // Detailed field descriptions
        const fieldDescriptions = {
            // Order related
            id: {
                description: "Unique identifier for the record",
                example: "123",
                notes: "Auto-generated by system"
            },
            orderNumber: {
                description: "Reference number for tracking orders",
                example: "POS2024020001",
                notes: "Auto-generated when order is created"
            },
            estimatedDeliveryTime: {
                description: "Expected delivery time",
                example: "2024-02-04T16:15:00Z",
                notes: "Based on standard delivery times"
            },
            total: {
                description: "Total amount of the order",
                example: "1000.50",
                notes: "Includes tax and shipping"
            },
            status: {
                description: "Current status",
                example: "PENDING",
                notes: "Values: PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED"
            },

            // Customer related
            customerId: {
                description: "Customer identifier",
                example: "CUST001",
                notes: "Unique identifier for customer"
            },
            email: {
                description: "Email address",
                example: "john@example.com",
                notes: "Must be valid email format"
            },
            phone: {
                description: "Phone number",
                example: "+66891234567",
                notes: "Include country code"
            },
            firstName: {
                description: "First name",
                example: "John",
                notes: null
            },
            lastName: {
                description: "Last name",
                example: "Doe",
                notes: null
            },

            // Product related
            productId: {
                description: "Product identifier",
                example: "PROD001",
                notes: "Unique identifier for product"
            },
            price: {
                description: "Product price",
                example: "39900",
                notes: "In smallest currency unit"
            },
            quantity: {
                description: "Item quantity",
                example: "2",
                notes: "Must be greater than 0"
            },
            stock: {
                description: "Available quantity",
                example: "100",
                notes: "Updates automatically on order"
            },

            // Address related
            address: {
                description: "Address information",
                example: "{ street, city, postalCode }",
                notes: "Shipping or billing address"
            },
            street: {
                description: "Street address",
                example: "123 Main St",
                notes: "Building number and street name"
            },
            city: {
                description: "City name",
                example: "Bangkok",
                notes: "City or municipality"
            },
            postalCode: {
                description: "Postal code",
                example: "10110",
                notes: "Local postal/zip code"
            },
            country: {
                description: "Country name",
                example: "Thailand",
                notes: "Full country name"
            }
        };

        // If field description exists, return it
        if (fieldDescriptions[key]) {
            return fieldDescriptions[key];
        }

        // Generate default description for unknown fields
        return {
            description: this.generateDefaultDescription(key),
            example: this.generateExample(value),
            notes: null
        };
    }

    generateDefaultDescription(key) {
        // Remove underscores and format the key
        return key
            .replace(/_/g, ' ') // Replace underscores with spaces
            .replace(/([A-Z])/g, ' $1') // Add spaces before capital letters
            .toLowerCase()
            .replace(/^./, str => str.toUpperCase()) // Capitalize first letter
            .trim();
    }

    generateResponseDescription(response) {
        const type = this.getType(response);
        return type === 'array' ? 'รายการข้อมูลที่ส่งกลับ' : 'ข้อมูลที่ส่งกลับ';
    }

    getType(value) {
        if (Array.isArray(value)) {
            const itemType = value.length > 0 ? this.getType(value[0]) : 'any';
            return `array<${itemType}>`;
        }
        if (value === null) {
            return 'null';
        }
        return typeof value;
    }

    generateExample(value) {
        if (value === null) return "null";
        if (typeof value === "object") {
            return JSON.stringify(value);
        }
        return String(value);
    }

    isRequired(key, value) {
        const requiredFields = [
            'id', 'orderNumber', 'customerId', 'productId', 
            'email', 'price', 'quantity', 'status',
            'street', 'city', 'postalCode', 'paymentMethod'
        ];
        return requiredFields.includes(key) || value !== null;
    }
}